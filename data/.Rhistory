}
finalize_vinereg_object <- function(formula, control_formula, model_frame, margins, vine, status, var_nms) {
# adjust model matrix and names
reorder <- status$selected_vars
reorder[order(reorder)] <- seq_along(status$selected_vars)
vine$names <- c(var_nms[1], names(reorder)[reorder])
# compute fit statistics
nobs <- nrow(model_frame)
var_edf <- status$edf
var_cll <- status$cll
var_caic <- -2 * var_cll + 2 * var_edf
var_cbic <- -2 * var_cll + log(nobs) * var_edf
var_p_value <- pchisq(2 * var_cll, var_edf, lower.tail = FALSE)
var_p_value[1] <- NA
cll <- sum(var_cll)
edf <- sum(var_edf)
caic <- sum(var_caic)
cbic <- sum(var_cbic)
stats <- list(
nobs = nobs,
edf = edf,
cll = cll,
caic = caic,
cbic = cbic,
var_edf = var_edf,
var_cll = var_cll,
var_caic = var_caic,
var_cbic = var_cbic,
var_p_value = var_p_value
)
# return results as S3 object
out <- list(
formula = formula,
gam_formula = control_formula,
selcrit = status$selcrit,
model_frame = model_frame,
margins = margins,
vine = vine,
stats = stats,
order = var_nms[status$selected_vars + 1],
selected_vars = as.numeric(status$selected_vars)
)
class(out) <- "gamvinereg"
return(out)
}
gam_control <- function(formula = ~ 1,
family_set = c(1, 2, 301:304, 401:404),
tau = TRUE,
method = "FS",
tol.rel = 0.001,
n.iters = 10) {
list(formula = formula,
family_set = family_set,
tau = tau,
method = method,
tol.rel = tol.rel,
n.iters = n.iters)
}
print.gamvinereg <- function(x) {
cat("D-vine regression model: ")
n_predictors <- length(x$order)
if (n_predictors <= 10) {
predictors <- paste(x$order, collapse = ", ")
} else {
predictors <- paste(x$order[1:10], collapse = ", ")
predictors <- paste0(predictors, ", ... (", n_predictors - 10, " more)")
}
cat(names(x$model_frame)[1], "|", predictors, "\n")
cat("GAM copula regression model: ")
if (x$vine$pair_copulas[[1]][[1]]$res@tau) {
cat(paste0("tau | ", as.character(x$gam_formula)[2], sep = ""), "\n")
} else {
cat(paste0("par | ", as.character(x$gam_formula)[2], sep = ""), "\n")
}
stats <- unlist(x$stats[1:5])
stats <- paste(names(stats), round(stats, 2), sep = " = ")
cat(paste(stats, collapse = ", "), "\n")
invisible(x)
}
summary.gamvinereg <- function(object) {
data.frame(
var = c(names(object$model_frame)[1], object$order),
edf = object$stats$var_edf,
cll = object$stats$var_cll,
caic = object$stats$var_caic,
cbic = object$stats$var_cbic,
p_value = object$stats$var_p_value
)
}
# GAM-based DVQR (selcrit is for margins and copulas the same)
gamvinereg <- function(formula, data, margins, selcrit = "AIC", control = gam_control(),
order = NA, uscale = FALSE, cores = 1) {
## pre-processing
if (!uscale) {
# remove unused variables
# create dummy formula for subsetting data frame for needed variables
margins_formulas <- unlist(margins, recursive = FALSE)
margins_predictors <- unlist(as.vector(sapply(1:length(margins_formulas), function(k) c(all.vars(margins_formulas[[k]]$mu.formula)[-1],
all.vars(margins_formulas[[k]]$sigma.formula),
all.vars(margins_formulas[[k]]$nu.formula),
all.vars(margins_formulas[[k]]$tau.formula)))))
control_predictors <- all.vars(control$formula)
additional_predictors <- c(margins_predictors, control_predictors)
dummy_formula <- update(formula, reformulate(c(".", additional_predictors)))
} else {
# create dummy formula for subsetting data frame for needed variables
control_predictors <- all.vars(control$formula)
dummy_formula <- update(formula, reformulate(c(".", control_predictors)))
margins <- NULL
}
# subset data frame
if (!missing(data)) {
mf <- model.frame(dummy_formula, data, na.action = na.omit)
} else {
mf <- model.frame(dummy_formula, parent.frame(), na.action = na.omit)
}
# marginal variables
vars <- all.vars(formula)
d <- length(vars)
# GAM copula variables
x <- mf[, all.vars(control$formula), drop = FALSE]
# estimation of the margins and transformation to copula data
margins <- fit_margins(data = mf,
vars = vars,
margins = margins,
selcrit = selcrit,
uscale = uscale,
cores = cores)
u <- to_uscale(data = mf,
margins = margins,
uscale = uscale,
cores = cores)
## initialization
current_fit <- initialize_fit(u = u)
status <- initialize_status(margins = margins,
selcrit = selcrit,
uscale = uscale)
## estimation
# no predetermined order
if (any(is.na(order))) {
# sequential forward variable selection algorithm
for (i in seq_len(d - 1)) {
new_fits <- mclapply(status$remaining_vars + 1, function(k) {
xtnd_vine(new_var = u[, k],
old_fit = current_fit,
control = control,
selcrit = selcrit,
x = x,
cores = cores)
}, mc.cores = cores)
# update selection criteria and copulas
status <- update_status(status = status,
new_vines = new_fits)
# check if optimum is found
if (status$optimum_found) {
break
}
# select 'best' fit
current_fit <- new_fits[[status$best_ind]]
}
# update selected variables
names(status$selected_vars) <- vars[status$selected_vars + 1]
} else { # predetermined order
# check that only available variables are in the 'order'
check_order(order = order,
var_nms = vars)
# to guarantee that all desired variables in 'order' will be included
status$selcrit <- "keep_all"
# conditional D-vine copula estimation using fixed order
for (var in order) {
current_fit <- xtnd_vine(u[, var], current_fit, control, selcrit, x, cores = cores)
status <- update_status(status, list(current_fit))
}
# update selected variables
status$selected_vars <- sapply(order, function(nm) which(vars == nm) - 1)
status$remaining_vars <- numeric(0)
# for finalize_vinereg_object correct copula selcrit
status$selcrit <- selcrit
}
# prepare final gamvinereg object
finalize_vinereg_object(
formula = formula,
control_formula = control$formula,
model_frame = mf,
margins = margins,
vine = current_fit$vine,
status = status,
var_nms = vars
)
}
# helper functions for predict.gamdvqr
get_pits <- function(olddata, newdata, margins, uscale, cores = 1) {
d <- length(margins)
vars <- names(margins)
if (!uscale) {
u <- mclapply(1:d, function(k) {
m <- margins[[k]]
y <- as.numeric(newdata[, vars[k]])
# estimate in-sample parameters
if(class(m$y) == "Surv") {
par <- lapply(1:length(m$parameters), function(k) predict(object = m,
newdata = newdata,
data = olddata,
what = m$parameters[k],
type = "response"))
assign(vars[k], y)
y <- eval(m$mu.formula[[2]])
par <- c(list(y), par)
names(par) <- c("q", m$parameters)
} else {
par <- predictAll(object = m,
newdata = newdata,
data = olddata,
type = "response")[m$parameters]
par <- c(list(y), par)
names(par) <- c("q", m$parameters)
}
# get in-sample u-data of y
u <- as.numeric(do.call(paste0("p", m$family[1]), par))
u
}, mc.cores = cores)
u <- matrix(unlist(u), ncol = d, byrow = FALSE)
} else {
# check if data in [0,1]
u <- newdata[, vars]
if ( any(u > 1) | any(u < 0) ) {
stop("Data has to be in the interval [0,1]!")
}
}
u <- matrix(as.matrix(truncate_u(u)), ncol = d)
colnames(u) <- vars
u <- as.data.frame(u)
return(u)
}
qdvine <- function(u, x, vine, alpha, cores = 1) {
d <- ncol(vine$structure)
if (ncol(u) != d - 1)
stop("Dimensions of u and vine are not compatible")
## obtain diagonal entries in V matrix
n <- nrow(u)
V <- array(NA, dim = c(d, d, n))
V[d, -1, ] <- t(u)
V2 <- V
if (d > 2) {
for (j in (d - 1):2) {
for (k in (d - 1):j) {
# temporär data
u_e <- data.frame(u = cbind(V2[k + 1, j, ], V[k + 1, j + 1, ]), x)
# bivariate copula info
bc <- vine$pair_copulas[[d - k]][[j]]$res
# family
family <- bc@family
# parameters
par <- as.numeric(gamBiCopPredict(bc, newdata = u_e, target = "par")$par)
if(family == 2) {
par2 <- bc@par2
} else {
par2 <- 0
}
# pseudo observations for next tree
if (family %in% c(1:2, 5)) {
# evaluation works component-wise, i.e. u_e[k, 1], u_e[k, 2], par[k], par2[k] (vectorized version)
V[k, j, ] <- BiCopHfunc1(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
V2[k, j, ] <- BiCopHfunc2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
} else if (family %in% c(301:304, 401:404)) {
# update family
family <- sapply(1:length(par), function(k) getFams(family, par[k]))
# evaluation works component-wise, i.e. u_e[k, 1], u_e[k, 2], par[k], family[k] (vectorized version)
V[k, j, ] <- BiCopHfunc1(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
V2[k, j, ] <- BiCopHfunc2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
}
}
}
tmp <- t(V[-1, 2, ])
} else {
tmp <- as.numeric(V[-1, 2, ])
}
# return quantiles
out <- mclapply(1:length(alpha), function(j) {
U <- cbind(alpha[j], tmp)
for (i in 1:(d-1)) {
# temporär data
u_e <- data.frame(u = U[, i:(i+1)], x)
# bivariate copula info
bc <- vine$pair_copulas[[d - i]][[1]]$res
# family
family <- bc@family
# parameters
par <- as.numeric(gamBiCopPredict(bc, newdata = u_e, target = "par")$par)
if(family == 2) {
par2 <- bc@par2
} else {
par2 <- 0
}
# pseudo observations for next tree
if (family %in% c(1:2, 5)) {
U[, i+1] <- BiCopHinv2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
} else if (family %in% c(301:304, 401:404)) {
# update family
family <- sapply(1:length(par), function(k) getFams(family, par[k]))
U[, i+1] <- BiCopHinv2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
}
}
U[, d]
}, mc.cores = cores)
out <- matrix(truncate_u(unlist(out)), ncol = length(alpha), byrow = FALSE)
return(out)
}
to_yscale <- function(model, olddata, newdata, q) {
if(class(model$y) == "Surv") {
par <- lapply(1:length(model$parameters), function(k) predict(object = model,
newdata = newdata,
data = olddata,
what = model$parameters[k],
type = "response"))
names(par) <- model$parameters
} else {
par <- predictAll(object = model,
newdata = newdata,
data = olddata)[model$parameters]
}
par <- lapply(1:ncol(q), function(k) c(p = list(q[, k]), par))
y <- sapply(1:ncol(q), function(k) do.call(paste0("q", model$family[1]), par[[k]]))
return(y)
}
# predict gamvinereg
predict.gamvinereg <- function(object, newdata, alpha = 0.5, cores = 1) {
# criterion for checking if data is already in [0,1]
uscale <- is.na(object$stats$var_cll[1])
if (!uscale) {
margins_formulas <- unlist(object$margins$specifications, recursive = FALSE)
margins_predictors <- unlist(as.vector(sapply(1:length(margins_formulas), function(k) c(all.vars(margins_formulas[[k]]$mu.formula)[-1],
all.vars(margins_formulas[[k]]$sigma.formula),
all.vars(margins_formulas[[k]]$nu.formula),
all.vars(margins_formulas[[k]]$tau.formula)))))
control_predictors <- all.vars(object$gam_formula)
additional_predictors <- c(margins_predictors, control_predictors)
dummy_formula <- update(object$formula, reformulate(c(".", additional_predictors)))
} else {
control_predictors <- all.vars(object$gam_formula)
dummy_formula <- update(object$formula, reformulate(c(".", control_predictors)))
}
# create output data.frame
output <- as.data.frame(matrix(NA, nrow = nrow(newdata), ncol = length(alpha), dimnames = list(c(), alpha)))
# subset data frame
if (!missing(newdata)) {
mf <- model.frame(dummy_formula, newdata, na.action = NULL)
cc <- complete.cases(mf[, -1])
mf <- mf[cc, ]
} else {
mf <- model.frame(dummy_formula, parent.frame(), na.action = NULL)
}
# GAM copula variables
x <- mf[, all.vars(object$gam_formula), drop = FALSE]
# to u-scale
u <- get_pits(olddata = object$model_frame,
newdata = mf,
margins = object$margins$models[object$order],
uscale = uscale,
cores = cores)
# calculate quantile on uniform (u)-scale
q <- qdvine(u = u,
x = x,
vine = object$vine,
alpha = alpha,
cores = cores)
if (!uscale) {
# transform to original y-scale
q <- to_yscale(model = object$margins$models[[1]],
olddata = object$model_frame,
newdata = mf,
q = q)
}
# fill in available quantiles
output[cc, ] <- q
return(output)
}
# conditional PIT for gamvinereg
pit <- function(object, newdata, cores = 1) {
# criterion for checking if data is already in [0,1]
uscale <- is.na(object$stats$var_cll[1])
if (!uscale) {
margins_formulas <- unlist(object$margins$specifications, recursive = FALSE)
margins_predictors <- unlist(as.vector(sapply(1:length(margins_formulas), function(k) c(all.vars(margins_formulas[[k]]$mu.formula)[-1],
all.vars(margins_formulas[[k]]$sigma.formula),
all.vars(margins_formulas[[k]]$nu.formula),
all.vars(margins_formulas[[k]]$tau.formula)))))
control_predictors <- all.vars(object$gam_formula)
additional_predictors <- c(margins_predictors, control_predictors)
dummy_formula <- update(object$formula, reformulate(c(".", additional_predictors)))
} else {
control_predictors <- all.vars(object$gam_formula)
dummy_formula <- update(object$formula, reformulate(c(".", control_predictors)))
}
# create output vector
output <- rep(NA, nrow(newdata))
# subset data frame
if (!missing(newdata)) {
mf <- model.frame(dummy_formula, newdata, na.action = NULL)
cc <- complete.cases(mf)
mf <- mf[cc, ]
} else {
mf <- model.frame(dummy_formula, parent.frame(), na.action = NULL)
}
# GAM copula variables
x <- mf[, all.vars(object$gam_formula), drop = FALSE]
# to u-scale
u <- get_pits(olddata = object$model_frame,
newdata = mf,
margins = object$margins$models[c(names(object$margins$models)[1], object$order)],
uscale = uscale,
cores = cores)
psobs_old <-  list(direct = array(u[, 1], dim = c(1, 1, nrow(u))),
indirect = array(NA, dim = c(1, 1, nrow(u))))
# conditional distribution
cond_dist <- function(new_var, pair_copulas, psobs_old) {
d <- dim(psobs_old$direct)[1] + 1
n <- length(new_var)
psobs <- list(
direct = array(NA, dim = c(d, d, n)),
indirect = array(NA, dim = c(d, d, n))
)
psobs$direct[-1, -d, ] <- psobs_old$direct
psobs$indirect[-1, -d, ] <- psobs_old$indirect
psobs$direct[d, d, ] <- new_var
for (i in rev(seq_len(d - 1))) {
# get data for current edge
u_e <- matrix(NA, n, 2)
u_e[, 1] <- psobs$direct[i + 1, i, ]
u_e[, 2] <- if (i == d - 1) {
psobs$direct[i + 1, i + 1, ]
} else {
psobs$indirect[i + 1, i + 1, ]
}
u_e <- data.frame(u = u_e, x)
pc_fit <- pair_copulas[[d - i]][[i]]
# bivariate copula info
# family
family <- pc_fit$res@family
# parameters
par <- as.numeric(gamBiCopPredict(pc_fit$res, newdata = u_e, target = "par")$par)
if(family == 2) {
par2 <- pc_fit$res@par2
} else {
par2 <- 0
}
# pseudo observations for next tree
if (family %in% c(1:2, 5)) {
# evaluation works component-wise, i.e. u_e[k, 1], u_e[k, 2], par[k], par2[k] (vectorized version)
psobs$direct[i, i, ] <- BiCopHfunc2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
psobs$indirect[i, i, ] <- BiCopHfunc1(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
} else if (family %in% c(301:304, 401:404)) {
# update family
family <- sapply(1:length(par), function(k) getFams(family, par[k]))
# evaluation works component-wise, i.e. u_e[k, 1], u_e[k, 2], par[k], family[k] (vectorized version)
psobs$direct[i, i, ] <- BiCopHfunc2(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
psobs$indirect[i, i, ] <- BiCopHfunc1(u1 = u_e[, 1], u2 = u_e[, 2], family = family, par = par, par2 = par2)
}
}
return(psobs)
}
for (var in object$order) {
psobs_old <- cond_dist(new_var = u[, var],
pair_copulas = object$vine$pair_copulas,
psobs_old = psobs_old)
}
# get PIT values
u <- psobs_old$direct[1, 1, ]
# fill in available PIT values
output[cc] <- u
return(output)
}
load("~/Desktop/gamvinereg/data/dat.RData")
# data transformation to uniform scale using empirical CDF
udat <- as.data.frame(VineCopula::pobs(dat[, 4:7]))
colnames(udat) <- colnames(dat)[4:7]
# formula for gamvinereg
formula <- y ~ x1 + x2 + x3
## generate marginal distributions
# generate left-truncated at 0 normal distribution
gen.trun(par = 0, family = "NO", type = "left")
# generate left-censored normal distribution
gen.cens(family = "NO", type = "left")
# generate log-normal distribution
gen.Family(family = "NO", type = "log")
## marginal specifications to select from
margins <- list(
# margin for variable y (left-truncated at 0 normal distribution)
list(list(family = NOtr(),
mu.formula = y ~ 1,
sigma.formula = ~ 1)),
# margin for variable x1 (normal distribution)
list(list(family = NO(),
mu.formula = x1 ~ sin1 + cos1,
sigma.formula = ~ sin1 + cos1)),
# margins for variable x2 (left-truncated/censored at 0 normal distribution)
list(list(family = NOtr(),
mu.formula = x2 ~ sin1 + cos1,
sigma.formula = ~ sin1 + cos1),
list(family = NOlc(),
mu.formula = Surv(x2, x2 > 0, type = "left") ~ sin1 + cos1,
sigma.formula = ~ sin1 + cos1)),
# margin for variable x3 (log-normal distribution)
list(list(family = logNO(),
mu.formula = x3 ~ sin1 + cos1,
sigma.formula = ~ sin1 + cos1))
)
(object1 <- gamvinereg(formula = formula,
data = dat,
control = gam_control(formula = ~ sin1 + cos1),
margins = margins))
View(object1)
