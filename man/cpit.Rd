% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cpit.R
\name{cpit}
\alias{cpit}
\title{Conditional probability integral transform (PIT)}
\usage{
cpit(object, newdata, cores = 1, ...)
}
\arguments{
\item{object}{an object of class \code{gamvinereg}.}

\item{newdata}{data frame of response variable and its covariates.}

\item{cores}{integer; the number of cores used for computations.
Default setting is \code{cores = 1}.}

\item{...}{unused.}
}
\value{
a vector of PIT values.
}
\description{
Calculates the conditional distribution of the response given the covariates.
}
\examples{
# load data for station Hannover
data(station)

# formula for gamvinereg
formula <- obs ~ t2m_mean + t2m_sd

## generate margin distributions
# generate left-truncated at 0 normal distribution
gen.trun(par = 0, family = "NO", type = "left")
# generate left-censored normal distribution
gen.cens(family = "NO", type = "left")
# generate log-normal distribution
gen.Family(family = "NO", type = "log")

## margin specifications to select from
margins <- list(

 # margin for variable obs (normal distribution)
 list(list(family = NO(),
           mu.formula = obs ~ sin1 + cos1,
           sigma.formula = ~ sin1 + cos1)),

 # margin for variable t2m_mean (normal distribution)
 list(list(family = NO(),
           mu.formula = t2m_mean ~ sin1 + cos1,
           sigma.formula = ~ sin1 + cos1)),

 # margins for variable t2m_sd (log-normal, left-truncated/censored at 0 normal distribution)
 list(list(family = logNO(),
           mu.formula = t2m_sd ~ sin1 + cos1,
           sigma.formula = ~ sin1 + cos1),
      list(family = NOtr(),
           mu.formula = t2m_sd ~ sin1 + cos1,
           sigma.formula = ~ sin1 + cos1),
      list(family = NOlc(),
           mu.formula = Surv(t2m_sd, t2m_sd > 0, type = "left") ~ sin1 + cos1,
           sigma.formula = ~ sin1 + cos1))

)


# fit gamvinereg with time-dependent linear correlation model
(object <- gamvinereg(formula = formula,
                      data = station,
                      control = gam_control(formula = ~ sin1 + cos1),
                      margins = margins))

# calculate PIT values
u <- cpit(object)
# should be approximately uniform
hist(u, probability = TRUE)


}
